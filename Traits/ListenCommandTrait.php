<?phpnamespace DefenderService\DamMicroService\Traits;trait ListenCommandTrait{    private  $PidFile;    //pid文件    private  $ForkNumber; //进程数量    private  $PidIds;     //进程ID    /**     * @description 守护进程实现     * @author changsheng.gu@vcg.com     * @param     * @return void     */    protected function daemon()    {        if (!defined('WNOHANG')) throw new \Exception('Must install pcntl extension first');        $pid = pcntl_fork();        if($pid == -1){            throw new \Exception('Fork process failed');        }elseif($pid){            exit(0); //父进程退出        }        for($i=0;$i<=$this->ForkNumber;$i++)        {            $cid =pcntl_fork();            if(!$cid){                if(posix_setsid() === -1) throw new \Exception('Detached terminal failed');                 chdir('/');                 umask(0);                $fp = fopen($this->PidFile, 'a');                if(!$fp) throw new \Exception('Try to open the pid file failed');                fwrite($fp, posix_getpid().PHP_EOL);                fclose($fp);                $this->listen();            }        }    }    /**     * @description 获取进程pid     * @author changsheng.gu@vcg.com     * @param     * @return array     */    protected function getPidIds()    {        if (!file_exists($this->PidFile))  return [];        $pidFile        = file_get_contents($this->PidFile);        $this->PidIds   = explode("\n",$pidFile);        $find  = [];        foreach ($this->PidIds as $val)        {            if(posix_kill(intval($val), SIG_DFL)) $find [] = $val;        }        if(empty($find)){            unlink($this->PidFile);            return [];        }else            return $find;    }    /**     * @description process     * @author changsheng.gu@vcg.com     * @param  string     * @return void     */    protected function process($param)    {        if($param == 'start'){            $this->start();        }elseif ($param == 'stop'){            $this->stop();        }elseif($param =='status'){            $this->status();        }    }    /**     * @description start     * @author changsheng.gu@vcg.com     * @param     * @return void     */    protected function start()    {        if (!empty($this->getPidIds())){            $this->printInfo('The queue already Running');        } else            $this->daemon();            $this->printInfo('Start Success');    }    /**     * @description run     * @author changsheng.gu@vcg.com     * @param     * @return void     */    protected function stop()    {        $pid = $this->getPidIds();        if (!empty($pid)) {            foreach ($pid as $val){                posix_kill(intval($val), SIGTERM);            }            unlink($this->PidFile);            $this->printInfo('Stop success');        } else            $this->printInfo('Stop Failed. Process Not Running');    }    /**     * @description run     * @author changsheng.gu@vcg.com     * @param  string     * @return void     */    protected function status()    {        if (!empty($this->getPidIds())){            $this->printInfo('Is Running');        } else            $this->printInfo('Not Running');    }    /**     * @description run     * @author changsheng.gu@vcg.com     * @param  string     * @return void     */    private function printInfo($message)    {        echo $message.PHP_EOL;    }}
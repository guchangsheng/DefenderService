<?phpnamespace DefenderService\DamMicroService;use DefenderService\DamMicroService\Exceptions\InvalidMicroServiceException;use DefenderService\DamMicroService\Supports\traits;class Service{    use traits;    /**     * Config.     *     * @var Config     */    protected $config;    /**     * Bootstrap.     *     * @author changsheng.gu@vcg.com     *     * @param array $config     */    public function __construct()    {      #  $this->config = new Config($config);    }    /**     * Create a instance.     *     * @author changsheng.gu@vcg.com     *     * @param string $method     *     * @return GatewayApplicationInterface     */    protected function create($method)    {       # !$this->config->has('log.file') ?: $this->registeLog();        $gateway = __NAMESPACE__.'\\Services\\'.$method;        $this->config = $this->getConfig($method);        if (class_exists($gateway)) {            return self::make($gateway);        }        throw new InvalidMicroServiceException("MicroService [{$method}] Not Exists");    }    /**     * Make a gateway.     *     * @author changsheng.gu@vcg.com     *     * @param string $gateway     *     * @return GatewayApplicationInterface     */    protected function make($gateway)    {        return new $gateway($this->config);    }    public function __call($method, $params)    {        $app = new self(...$params);        return $app->create($method);    }    /**     * Magic static call.     *     * @author changsheng.gu@vcg.com     *     * @param string $method     * @param array  $params     *     * @return GatewayApplicationInterface     */    public static function __callStatic($method, $params)    {        $app = new self(...$params);        return $app->create($method);    }}
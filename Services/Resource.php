<?phpnamespace DefenderService\DamMicroService\Services;use DefenderService\DamMicroService\Contracts\MicroServiceApplicationInterface;use DefenderService\DamMicroService\Exceptions\InvalidServiceActionException;use DefenderService\DamMicroService\Supports\Config;use DefenderService\DamMicroService\Supports\traits;class Resource implements MicroServiceApplicationInterface{    protected $payload;    public  $config;    public  $token;    use traits;    public function __construct(Config $config)    {        $this->config = $config;    }    public function setToken($token)    {        // TODO: Implement setToken() method.        $this->token = $token;        return $this;    }    public function __call($method, $params)    {        return self::Build($method, ...$params);    }    public function Build($gateway, $params )    {        $gateway = get_class($this).'\\'.$params.'Api';        $this->config = $this->getConfig(basename(str_replace('\\', '/', get_class($this))).'.'.$params.'Api');        if (class_exists($gateway)) {            return $this->BuildClass($gateway);        }        throw new InvalidServiceActionException(__CLASS__."service Action [{$gateway}] Not Exists");    }    protected function BuildClass($gateway)    {        return new $gateway($this->config,$this->token);    }}
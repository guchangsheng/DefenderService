<?phpnamespace DefenderService\DamMicroService\Supports;use DefenderService\DamMicroService\Exceptions\InvalidServiceConfigException;use DefenderService\DamMicroService\Supports\Config;use GuzzleHttp\Exception\RequestException;use  Log;trait traits {    public function getConfig($params){        $config =  config('services.'.$params);        if(!$config){            throw new InvalidServiceConfigException("MicroService API config [{$params}] Not Exists");        }        return new Config(config('services.'.$params));    }    public function PostJson($url,$data,$token) {        try {            $client = new \GuzzleHttp\Client(['timeout' => 10,'headers'=>['authorization'=>$token]]);            $response = $client->post($url, ['json' => $data]);            $code = $response->getStatusCode();            if ($code != 200) {                return $this->respondWithErrors('Microservice error');            }            $response = $response->getBody()->getContents();        } catch (RequestException $e) {            #var_dump($e->getMessage());die;            Log::info($e->getCode());            Log::info($e->getMessage());            return $this->respondWithErrors('Microservice error');        }        $response = json_decode($response, true);        return $response;    }    public function respondWithErrors($errors) {        $swagger_data = array();        $swagger_data['status_code'] = 0;        $swagger_data['message'] = $errors;        $swagger_data['data'] = false;        if(env('APP_DEBUG'))        {            echo  json_encode($swagger_data,JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT);            exit;        }        echo  json_encode($swagger_data,JSON_UNESCAPED_UNICODE);        exit;    }}
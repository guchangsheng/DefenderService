<?phpnamespace DefenderService\DamMicroService\LogService;use Mockery\Exception;use Monolog\Logger;use Monolog\Handler\StreamHandler;class DamLogService{    /**     * [日志按分类及路径自定义封装输出json格式以支持ELK]     * @by.changsheng.gu@vcg.com     * @DateTime 2018-03-02T11:23:56+0800     */    protected $channels;    protected $channelName;    const ERROR = 'error';    const INFO  = 'info';    const DAYS  = '5';    /**     * [获取日分类分类路径]     * @by.changsheng.gu@vcg.com     * @DateTime 2018-03-02T11:23:56+0800     * @return   object     */    public function channel($channel)    {        $this->channels     = config('logger.'.$channel);        $this->channelName  = $channel;        if(empty($this->channels))            throw new \LogicException($channel.'not defined');        else{            if(!isset($this->channels['path'])||empty($this->channels['path'])){                throw new \LogicException('logger.config channels path not defined.');            }        }        return $this;    }    /**     * [获取日分类分类路径]     * @by.changsheng.gu@vcg.com     * @return   string     */    protected function GetPath(){        return $this->channels['path'];    }    /**     * [获取日志模式]     * @by.changsheng.gu@vcg.com     */    protected function GetDriver(){         if(isset($this->channels['driver'])&&!empty($this->channels['driver'])){              return $this->channels['driver'];         }else             return false;    }    /**     * [保存日志最大文件天数]     * @by.changsheng.gu@vcg.com     */    protected function GetMaxFiles(){        if(isset($this->channels['days'])&&is_numeric($this->channels['days'])){            return $this->channels['days'];        }else            return self::DAYS;    }    /**     * [日志LEVEL为error]     * @by.changsheng.gu@vcg.com     */    public function error($message){        $this->doLogger($message,self::ERROR);    }    /**     * [日志LEVEL为info]     * @by.changsheng.gu@vcg.com     */    public function info($message){        $this->doLogger($message,self::INFO);    }    /**     * [日志输出]     * @by.changsheng.gu@vcg.com     */    protected function doLogger($message,$type){        if($this->channels){            $Logger = new Logger($this->channelName);            $formatter = new \Monolog\Formatter\LogstashFormatter(null, null, null, 'ctxt_',                \Monolog\Formatter\LogstashFormatter::V1);            if($this->GetDriver()=='daily'){                $Logger->pushHandler((new \Monolog\Handler\RotatingFileHandler($this->GetPath(), $this->GetMaxFiles()))                    ->setFormatter($formatter), Logger::DEBUG);            }else{                $Logger->pushHandler((new StreamHandler($this->GetPath()))                    ->setFormatter($formatter), Logger::DEBUG); //以日期存储日志            }            $Logger->$type($message);        }else            throw new \LogicException('must custom a channel first');    }}